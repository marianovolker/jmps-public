#include <mraa/aio.h>
#include <mraa.h>
#include <unistd.h>

mraa_result_t leer(int puerto, int & valor);

int main(int argc, char *argv[])
{
   if( argc != 2 )
   {
      fprintf(stdout, "La cantidad de argumentos recibido es incorrecto [%d]\n", (argc-1));
      fprintf(stdout, "La forma correcta de ejecucion es: \n $%s {puerto}.\n", argv[0]);
      fprintf(stdout, "\tDonde:\n\t\t{puerto} es el puerto digital al cual esta conectado el sensor/actuador.\n");
      fprintf(stdout, "\t\t\tObtendremos el valor leido del puerto.\n");
      exit (1);
   }

   mraa_result_t estado;
   int puerto = 2;
   int valor  = 0;

   puerto = atoi(argv[1]);

   if( !((puerto >= 2) && (puerto <=13)) )
   {
      fprintf(stdout, "El valor del puerto debe ser entre 2 y 13 \n");
      exit (1);
   }

   if( (estado=leer(puerto, valor)) == MRAA_SUCCESS )
   {
     fprintf(stdout, "valor : %d", valor);
   }

   mraa_deinit();

   return (estado == MRAA_SUCCESS)?(0):(1);
}

mraa_result_t leer(int puerto, int & valor)
{
  mraa_result_t estado;

  estado = mraa_init();
  if( estado != MRAA_SUCCESS && estado != MRAA_ERROR_PLATFORM_ALREADY_INITIALISED )
  {
     fprintf(stdout, "La placa de desarrollo no esta lista %d\n", estado);
     return estado;
  }

  //mraa_gpio_context gpio = mraa_gpio_init (puerto);
  mraa_gpio_context gpio = mraa_gpio_init_raw (puerto);

  if( gpio != NULL )
  {
     if( mraa_gpio_dir( gpio, MRAA_GPIO_IN ) != MRAA_SUCCESS )
     {
        fprintf (stderr, "No se puedo establecer el pin digital como entrada!");
        return MRAA_ERROR_NO_RESOURCES;
     }

     valor = mraa_gpio_read (gpio);
     mraa_gpio_close (gpio);
     return MRAA_SUCCESS;
  }

  return MRAA_ERROR_NO_RESOURCES;
}

