##-#######################################################################-##
# Copyright © 2014 Gilbarco Inc.
# Confidential and Proprietary.
#
## @file GvrCheckVersion.cmake
## @author pcantarini
## @date Tuesday, May 13, 2014
## @copyright Copyright © 2014 Gilbarco Inc. Confidential and Proprietary.
##-#######################################################################-##

cmake_minimum_required(VERSION 2.8.1 FATAL_ERROR)

if (NOT DEFINED GVR_CHECK_VERSION_INCLUDED)
  set(GVR_CHECK_VERSION_INCLUDED ON)

  ############### GVR Support Definitions ###############
  function (GVR_CHECK_VERSION)
    include(CMakeParseArguments)
    include(CMakePackageConfigHelpers)
    set(GVR_FLAGS "")
    set(GVR_SINGLE_VALUE PACKAGE VERSION CHANGELOG)
    set(GVR_MULTI_VALUE DEPENDS)
    cmake_parse_arguments(GVR_CHECK_VERSION "${GVR_FLAGS}" "${GVR_SINGLE_VALUE}" "${GVR_MULTI_VALUE}" ${ARGN})
    if ((GVR_CHECK_VERSION_PACKAGE) AND (GVR_CHECK_VERSION_VERSION))
      set(GVR_CHECK_VERSION_DEPENDS_LENGTH 0)
      if (GVR_CHECK_VERSION_DEPENDS)
        list(LENGTH GVR_CHECK_VERSION_DEPENDS GVR_CHECK_VERSION_DEPENDS_LENGTH)
      endif (GVR_CHECK_VERSION_DEPENDS)
      math(EXPR GVR_CHECK_VERSION_DEPENDS_TUPLE "${GVR_CHECK_VERSION_DEPENDS_LENGTH} % 3")
      if (GVR_CHECK_VERSION_DEPENDS_TUPLE EQUAL 0)
        set(GVR_CHECK_VERSION_DEPENDS_VERSIONS "")
        set(GVR_CHECK_VERSION_DEPENDS_MISMATCH "")
        set(GVR_CHECK_VERSION_CHANGELOG_MISMATCH "")
        while (GVR_CHECK_VERSION_DEPENDS_LENGTH GREATER 2)
          list(GET GVR_CHECK_VERSION_DEPENDS 0 GVR_CHECK_VERSION_DEPENDENCY_PACKAGE)
          list(GET GVR_CHECK_VERSION_DEPENDS 1 GVR_CHECK_VERSION_DEPENDENCY_VERSION_EXPECTED)
          list(GET GVR_CHECK_VERSION_DEPENDS 2 GVR_CHECK_VERSION_DEPENDENCY_VERSION)
          set(GVR_CHECK_VERSION_DEPENDS_VERSIONS "${GVR_CHECK_VERSION_DEPENDS_VERSIONS} ${GVR_CHECK_VERSION_DEPENDENCY_PACKAGE}_${GVR_CHECK_VERSION_DEPENDENCY_VERSION_EXPECTED}")
          if (NOT ${GVR_CHECK_VERSION_DEPENDENCY_VERSION_EXPECTED} STREQUAL ${GVR_CHECK_VERSION_DEPENDENCY_VERSION})
            set(GVR_CHECK_VERSION_DEPENDS_MISMATCH "${GVR_CHECK_VERSION_DEPENDS_MISMATCH} ${GVR_CHECK_VERSION_DEPENDENCY_PACKAGE}_${GVR_CHECK_VERSION_DEPENDENCY_VERSION}")
          endif (NOT ${GVR_CHECK_VERSION_DEPENDENCY_VERSION_EXPECTED} STREQUAL ${GVR_CHECK_VERSION_DEPENDENCY_VERSION})
          list(REMOVE_AT GVR_CHECK_VERSION_DEPENDS 0 1 2)
          list(LENGTH GVR_CHECK_VERSION_DEPENDS GVR_CHECK_VERSION_DEPENDS_LENGTH)
        endwhile (GVR_CHECK_VERSION_DEPENDS_LENGTH GREATER 2)

        if (GVR_CHECK_VERSION_CHANGELOG)
          get_filename_component(GVR_CHECK_VERSION_CHANGELOG "${GVR_CHECK_VERSION_CHANGELOG}" ABSOLUTE)
          file(TO_CMAKE_PATH "${GVR_CHECK_VERSION_CHANGELOG}" GVR_CHECK_VERSION_CHANGELOG)
          string(LENGTH "${CMAKE_SOURCE_DIR}" GVR_CHECK_VERSION_CHANGELOG_CHECK_PARENT_LENGTH)
          string(SUBSTRING "${GVR_CHECK_VERSION_CHANGELOG}" 0 ${GVR_CHECK_VERSION_CHANGELOG_CHECK_PARENT_LENGTH} GVR_CHECK_VERSION_CHANGELOG_PARENT)
          if (CMAKE_SOURCE_DIR STREQUAL "${GVR_CHECK_VERSION_CHANGELOG_PARENT}")
            file(RELATIVE_PATH GVR_CHECK_VERSION_CHANGELOG_PATH  "${CMAKE_SOURCE_DIR}" "${GVR_CHECK_VERSION_CHANGELOG}")
          else (CMAKE_SOURCE_DIR STREQUAL "${GVR_CHECK_VERSION_CHANGELOG_PARENT}")
            set(GVR_CHECK_VERSION_CHANGELOG_PATH "${GVR_CHECK_VERSION_CHANGELOG}")
          endif (CMAKE_SOURCE_DIR STREQUAL "${GVR_CHECK_VERSION_CHANGELOG_PARENT}")
          set(GVR_CHECK_VERSION_CHANGELOG_PARENT "")
          set(GVR_CHECK_VERSION_CHANGELOG_CHECK_PARENT_LENGTH "")

          if (EXISTS "${GVR_CHECK_VERSION_CHANGELOG}")
            if (NOT IS_DIRECTORY "${GVR_CHECK_VERSION_CHANGELOG}")
                # Look for the first changelog entry which has the following format: 'package (version) distribution(s); urgency=urgency' 
                file(STRINGS "${GVR_CHECK_VERSION_CHANGELOG}" GVR_CHECK_VERSION_CHANGELOG_LATEST_ENTRY LIMIT_COUNT 1 REGEX "^[^(]*\\([^)]+\\).*$")
                if (GVR_CHECK_VERSION_CHANGELOG_LATEST_ENTRY)
                  # Obtain Version Info
                  string(REGEX REPLACE "^[^(]*\\(([^)]+)\\).*$" "\\1" GVR_CHECK_VERSION_CHANGELOG_VERSION ${GVR_CHECK_VERSION_CHANGELOG_LATEST_ENTRY})
                  if (NOT GVR_CHECK_VERSION_CHANGELOG_VERSION STREQUAL "${GVR_CHECK_VERSION_VERSION}")
                    set(GVR_CHECK_VERSION_CHANGELOG_MISMATCH "ChangeLog '${GVR_CHECK_VERSION_CHANGELOG_PATH}'. Invalid version ${GVR_CHECK_VERSION_CHANGELOG_VERSION}...")
                  endif (NOT GVR_CHECK_VERSION_CHANGELOG_VERSION STREQUAL "${GVR_CHECK_VERSION_VERSION}")
                else (GVR_CHECK_VERSION_CHANGELOG_LATEST_ENTRY)
                  set(GVR_CHECK_VERSION_CHANGELOG_MISMATCH "ChangeLog '${GVR_CHECK_VERSION_CHANGELOG_PATH}'. Invalid entry...")
                endif (GVR_CHECK_VERSION_CHANGELOG_LATEST_ENTRY)
            else (NOT IS_DIRECTORY "${GVR_CHECK_VERSION_CHANGELOG}")
              set(GVR_CHECK_VERSION_CHANGELOG_MISMATCH "ChangeLog '${GVR_CHECK_VERSION_CHANGELOG_PATH}'. Invalid file name...")
            endif (NOT IS_DIRECTORY "${GVR_CHECK_VERSION_CHANGELOG}")
          else (EXISTS "${GVR_CHECK_VERSION_CHANGELOG}")
            set(GVR_CHECK_VERSION_CHANGELOG_MISMATCH "ChangeLog '${GVR_CHECK_VERSION_CHANGELOG_PATH}'. File not found...")
          endif (EXISTS "${GVR_CHECK_VERSION_CHANGELOG}")
        endif (GVR_CHECK_VERSION_CHANGELOG)

        set(GVR_CHECK_VERSION_HEADER "\n\t${GVR_CHECK_VERSION_PACKAGE}_${GVR_CHECK_VERSION_VERSION}\n")
        set(GVR_CHECK_VERSION_DEPENDS_VERSIONS_SECTION "")
        set(GVR_CHECK_VERSION_DEPENDS_MISMATCH_SECTION "")
        if (GVR_CHECK_VERSION_DEPENDS_VERSIONS)
          set(GVR_CHECK_VERSION_DEPENDS_VERSIONS_SECTION "\t\tDepends: ${GVR_CHECK_VERSION_DEPENDS_VERSIONS}\n")
        endif (GVR_CHECK_VERSION_DEPENDS_VERSIONS)
        if (GVR_CHECK_VERSION_DEPENDS_MISMATCH)
          set(GVR_CHECK_VERSION_DEPENDS_MISMATCH_SECTION "\t\tMismatch: ${GVR_CHECK_VERSION_DEPENDS_MISMATCH}\n")
        endif (GVR_CHECK_VERSION_DEPENDS_MISMATCH)
        if (GVR_CHECK_VERSION_CHANGELOG_MISMATCH)
          set(GVR_CHECK_VERSION_DEPENDS_MISMATCH_SECTION "\t\tMismatch: ${GVR_CHECK_VERSION_CHANGELOG_MISMATCH}\n")
        endif (GVR_CHECK_VERSION_CHANGELOG_MISMATCH)

        add_custom_target("version-${GVR_CHECK_VERSION_PACKAGE}"
                          COMMENT "\n${GVR_CHECK_VERSION_HEADER}${GVR_CHECK_VERSION_DEPENDS_VERSIONS_SECTION}${GVR_CHECK_VERSION_DEPENDS_MISMATCH_SECTION}\n\n")

        if (GVR_CHECK_VERSION_DEPENDS_MISMATCH_SECTION)
          add_custom_target("version-mismatch-${GVR_CHECK_VERSION_PACKAGE}"
                            COMMENT "\n${GVR_CHECK_VERSION_HEADER}${GVR_CHECK_VERSION_DEPENDS_MISMATCH_SECTION}\n\n"
                            COMMAND exit 1)
        else (GVR_CHECK_VERSION_DEPENDS_MISMATCH_SECTION)
          add_custom_target("version-mismatch-${GVR_CHECK_VERSION_PACKAGE}")
        endif (GVR_CHECK_VERSION_DEPENDS_MISMATCH_SECTION)

        if (NOT TARGET version)
          add_custom_target(version)
        endif (NOT TARGET version)
        add_dependencies(version "version-${GVR_CHECK_VERSION_PACKAGE}")

        if (NOT TARGET version-mismatch)
          add_custom_target(version-mismatch)
        endif (NOT TARGET version-mismatch)
        add_dependencies(version-mismatch "version-mismatch-${GVR_CHECK_VERSION_PACKAGE}")

      else (GVR_CHECK_VERSION_DEPENDS_TUPLE EQUAL 0)
        message(FATAL_ERROR "Invalid DEPENDS list format. Each entry should be a tuple like <package> <expected version> <obtained version>")
      endif (GVR_CHECK_VERSION_DEPENDS_TUPLE EQUAL 0)
    else ((GVR_CHECK_VERSION_PACKAGE) AND (GVR_CHECK_VERSION_VERSION))
      if (NOT GVR_CHECK_VERSION_PACKAGE)
        message(FATAL_ERROR "Invalid PACKAGE name.")
      endif (NOT GVR_CHECK_VERSION_PACKAGE)
      if (NOT GVR_CHECK_VERSION_VERSION)
        message(FATAL_ERROR "Invalid VERSION for package.")
      endif (NOT GVR_CHECK_VERSION_VERSION)
    endif ((GVR_CHECK_VERSION_PACKAGE) AND (GVR_CHECK_VERSION_VERSION))
  endfunction (GVR_CHECK_VERSION)
endif (NOT DEFINED GVR_CHECK_VERSION_INCLUDED)
