##-#######################################################################-##
# Copyright © 2014, 2015 Gilbarco Inc.
# Confidential and Proprietary.
#
## @file GvrCppCheck.cmake
## @author pcantarini
## @date Friday, May 16, 2014
## @copyright Copyright © 2014, 2015 Gilbarco Inc. Confidential and Proprietary.
##-#######################################################################-##

cmake_minimum_required(VERSION 2.8.1 FATAL_ERROR)

if (NOT DEFINED GVR_EXPORT_BUILD_INCLUDED)
  set(GVR_EXPORT_BUILD_INCLUDED ON)

  ############### GVR Support Definitions ###############
  function (GVR_EXPORT_BUILD_INSTALL)
    include(CMakeParseArguments)
    set(GVR_FLAGS REMOVE_FIRST STRIP)
    set(GVR_SINGLE_VALUE PROJECT DESTINATION)
    set(GVR_MULTI_VALUE OPTIONS)
    cmake_parse_arguments(GVR_EXPORT_BUILD_INSTALL "${GVR_FLAGS}" "${GVR_SINGLE_VALUE}" "${GVR_MULTI_VALUE}" ${ARGN})
    if (GVR_EXPORT_BUILD_INSTALL_PROJECT)
      set(GVR_EXPORT_BUILD_INSTALL_PROJECT_LOCATION ${${GVR_EXPORT_BUILD_INSTALL_PROJECT}_BINARY_DIR})
      if (IS_DIRECTORY ${GVR_EXPORT_BUILD_INSTALL_PROJECT_LOCATION})
        set(GVR_EXPORT_BUILD_INSTALL_SCRIPT ${GVR_EXPORT_BUILD_INSTALL_PROJECT_LOCATION}/cmake_install.cmake)
        if (GVR_EXPORT_BUILD_INSTALL_DESTINATION)
          file(TO_CMAKE_PATH ${GVR_EXPORT_BUILD_INSTALL_DESTINATION} GVR_EXPORT_BUILD_INSTALL_DESTINATION)
          if (NOT IS_ABSOLUTE ${GVR_EXPORT_BUILD_INSTALL_DESTINATION})
            set(GVR_EXPORT_BUILD_INSTALL_DESTINATION ${CMAKE_BINARY_DIR}/${GVR_EXPORT_BUILD_INSTALL_DESTINATION})
          endif (NOT IS_ABSOLUTE ${GVR_EXPORT_BUILD_INSTALL_DESTINATION})
          get_filename_component(GVR_EXPORT_BUILD_INSTALL_DESTINATION ${GVR_EXPORT_BUILD_INSTALL_DESTINATION} REALPATH)

          set(GVR_EXPORT_BUILD_INSTALL_OPTIONS_CMAKE_STYLE "-DCMAKE_INSTALL_PREFIX='${GVR_EXPORT_BUILD_INSTALL_DESTINATION}'")
          if (GVR_EXPORT_BUILD_INSTALL_STRIP)
            set(GVR_EXPORT_BUILD_INSTALL_OPTIONS_CMAKE_STYLE ${GVR_EXPORT_BUILD_INSTALL_OPTIONS_CMAKE_STYLE} "-DCMAKE_INSTALL_DO_STRIP=ON")
          endif (GVR_EXPORT_BUILD_INSTALL_STRIP)
          foreach(GVR_EXPORT_BUILD_INSTALL_OPTION ${GVR_EXPORT_BUILD_INSTALL_OPTIONS})
            set(GVR_EXPORT_BUILD_INSTALL_OPTIONS_CMAKE_STYLE ${GVR_EXPORT_BUILD_INSTALL_OPTIONS_CMAKE_STYLE} "-D${GVR_EXPORT_BUILD_INSTALL_OPTION}")
          endforeach(GVR_EXPORT_BUILD_INSTALL_OPTION)

          set(GVR_EXPORT_BUILD_INSTALL_DO_FIRST_COMMAND "")
          if (GVR_EXPORT_BUILD_INSTALL_REMOVE_FIRST)
            set(GVR_EXPORT_BUILD_INSTALL_DO_FIRST_COMMAND COMMAND ${CMAKE_COMMAND} -E remove_directory ${GVR_EXPORT_BUILD_INSTALL_DESTINATION})
          endif (GVR_EXPORT_BUILD_INSTALL_REMOVE_FIRST)

          if (NOT TARGET export-${GVR_EXPORT_BUILD_INSTALL_PROJECT}-install)
            add_custom_target(export-${GVR_EXPORT_BUILD_INSTALL_PROJECT}-install
                              ${GVR_EXPORT_BUILD_INSTALL_DO_FIRST_COMMAND}
                              COMMAND ${CMAKE_COMMAND} ${GVR_EXPORT_BUILD_INSTALL_OPTIONS_CMAKE_STYLE} "-P" "${GVR_EXPORT_BUILD_INSTALL_SCRIPT}"
                              WORKING_DIRECTORY ${GVR_EXPORT_BUILD_INSTALL_PROJECT_LOCATION}
                              COMMENT "Exporting project '${GVR_EXPORT_BUILD_INSTALL_PROJECT}' installation to destination '${GVR_EXPORT_BUILD_INSTALL_DESTINATION}'..." VERBATIM)
          endif (NOT TARGET export-${GVR_EXPORT_BUILD_INSTALL_PROJECT}-install)

          if (NOT TARGET export-${GVR_EXPORT_BUILD_INSTALL_PROJECT})
            add_custom_target(export-${GVR_EXPORT_BUILD_INSTALL_PROJECT})
          endif (NOT TARGET export-${GVR_EXPORT_BUILD_INSTALL_PROJECT})
          add_dependencies(export-${GVR_EXPORT_BUILD_INSTALL_PROJECT} export-${GVR_EXPORT_BUILD_INSTALL_PROJECT}-install)

          if (NOT TARGET export)
            add_custom_target(export)
          endif (NOT TARGET export)
          add_dependencies(export export-${GVR_EXPORT_BUILD_INSTALL_PROJECT})

        else (GVR_EXPORT_BUILD_INSTALL_DESTINATION)
          message(FATAL_ERROR "GVR_EXPORT_BUILD_INSTALL: No destination assigned for this buid export...")
        endif (GVR_EXPORT_BUILD_INSTALL_DESTINATION)
      else (IS_DIRECTORY ${GVR_EXPORT_BUILD_INSTALL_PROJECT_LOCATION})
        message(FATAL_ERROR "GVR_EXPORT_BUILD_INSTALL: Invalid project assigned for this buid export...")
      endif (IS_DIRECTORY ${GVR_EXPORT_BUILD_INSTALL_PROJECT_LOCATION})
    else (GVR_EXPORT_BUILD_INSTALL_PROJECT)
      message(FATAL_ERROR "GVR_EXPORT_BUILD_INSTALL: No project assigned for this buid export...")
    endif (GVR_EXPORT_BUILD_INSTALL_PROJECT)
  endfunction (GVR_EXPORT_BUILD_INSTALL)

  ############### GVR Support Definitions ###############
  function (GVR_EXPORT_BUILD_EXTRA)
    include(CMakeParseArguments)
    set(GVR_FLAGS REMOVE_FIRST REMOVE_FIRST_RESOURCES_ONLY NO_SOURCE_PERMISSIONS USE_SOURCE_PERMISSIONS)
    set(GVR_SINGLE_VALUE PROJECT DESTINATION)
    set(GVR_MULTI_VALUE PATTERNS FILE_PERMISSIONS DIRECTORY_PERMISSIONS RESOURCES)
    cmake_parse_arguments(GVR_EXPORT_BUILD_EXTRA "${GVR_FLAGS}" "${GVR_SINGLE_VALUE}" "${GVR_MULTI_VALUE}" ${ARGN})
    if (GVR_EXPORT_BUILD_EXTRA_PROJECT)
      set(GVR_EXPORT_BUILD_EXTRA_PROJECT_LOCATION ${${GVR_EXPORT_BUILD_EXTRA_PROJECT}_BINARY_DIR})
      if (IS_DIRECTORY ${GVR_EXPORT_BUILD_EXTRA_PROJECT_LOCATION})
        if (GVR_EXPORT_BUILD_EXTRA_DESTINATION)
          file(TO_CMAKE_PATH ${GVR_EXPORT_BUILD_EXTRA_DESTINATION} GVR_EXPORT_BUILD_EXTRA_DESTINATION)
          if (NOT IS_ABSOLUTE ${GVR_EXPORT_BUILD_EXTRA_DESTINATION})
            set(GVR_EXPORT_BUILD_EXTRA_DESTINATION ${CMAKE_BINARY_DIR}/${GVR_EXPORT_BUILD_EXTRA_DESTINATION})
          endif (NOT IS_ABSOLUTE ${GVR_EXPORT_BUILD_EXTRA_DESTINATION})
          get_filename_component(GVR_EXPORT_BUILD_EXTRA_DESTINATION ${GVR_EXPORT_BUILD_EXTRA_DESTINATION} REALPATH)

          if (GVR_EXPORT_BUILD_EXTRA_RESOURCES)
            set(GVR_EXPORT_BUILD_EXTRA_SCRIPT ${GVR_EXPORT_BUILD_EXTRA_PROJECT_LOCATION}/gvr_export_build_extra.cmake)
            file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} "
file(COPY")
            foreach (GVR_EXPORT_BUILD_EXTRA_RESOURCE ${GVR_EXPORT_BUILD_EXTRA_RESOURCES})
              if (NOT IS_ABSOLUTE ${GVR_EXPORT_BUILD_EXTRA_RESOURCE})
                set(GVR_EXPORT_BUILD_EXTRA_RESOURCE ${CMAKE_CURRENT_SOURCE_DIR}/${GVR_EXPORT_BUILD_EXTRA_RESOURCE})
              endif (NOT IS_ABSOLUTE ${GVR_EXPORT_BUILD_EXTRA_RESOURCE})
              file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " \"" ${GVR_EXPORT_BUILD_EXTRA_RESOURCE} "\"")
            endforeach (GVR_EXPORT_BUILD_EXTRA_RESOURCE)

            file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " DESTINATION \"" ${GVR_EXPORT_BUILD_EXTRA_DESTINATION} "\"")

            if (GVR_EXPORT_BUILD_EXTRA_FILE_PERMISSIONS)
              file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " FILE_PERMISSIONS")
              foreach (GVR_EXPORT_BUILD_EXTRA_FILE_PERMISSION ${GVR_EXPORT_BUILD_EXTRA_FILE_PERMISSIONS})
                file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " " ${GVR_EXPORT_BUILD_EXTRA_FILE_PERMISSION})
              endforeach (GVR_EXPORT_BUILD_EXTRA_FILE_PERMISSION)
            endif (GVR_EXPORT_BUILD_EXTRA_FILE_PERMISSIONS)

            if (GVR_EXPORT_BUILD_EXTRA_DIRECTORY_PERMISSIONS)
              file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " DIRECTORY_PERMISSIONS")
              foreach (GVR_EXPORT_BUILD_EXTRA_DIRECTORY_PERMISSION ${GVR_EXPORT_BUILD_EXTRA_DIRECTORY_PERMISSIONS})
                file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " " ${GVR_EXPORT_BUILD_EXTRA_DIRECTORY_PERMISSION})
              endforeach (GVR_EXPORT_BUILD_EXTRA_DIRECTORY_PERMISSION)
            endif (GVR_EXPORT_BUILD_EXTRA_DIRECTORY_PERMISSIONS)

            if (GVR_EXPORT_BUILD_EXTRA_NO_SOURCE_PERMISSIONS)
              file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " NO_SOURCE_PERMISSIONS")
            endif (GVR_EXPORT_BUILD_EXTRA_NO_SOURCE_PERMISSIONS)

            if (GVR_EXPORT_BUILD_EXTRA_USE_SOURCE_PERMISSIONS)
              file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " USE_SOURCE_PERMISSIONS")
            endif (GVR_EXPORT_BUILD_EXTRA_USE_SOURCE_PERMISSIONS)

            if (GVR_EXPORT_BUILD_EXTRA_PATTERNS)
              while (GVR_EXPORT_BUILD_EXTRA_PATTERNS)
                list(GET GVR_EXPORT_BUILD_EXTRA_PATTERNS 0 GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT)
                list(REMOVE_AT GVR_EXPORT_BUILD_EXTRA_PATTERNS 0)
                file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " " ${GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT})

                if ((GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT STREQUAL "PATTERN") OR (GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT STREQUAL "REGEX"))
                  if (GVR_EXPORT_BUILD_EXTRA_PATTERNS)
                    list(GET GVR_EXPORT_BUILD_EXTRA_PATTERNS 0 GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT)
                    list(REMOVE_AT GVR_EXPORT_BUILD_EXTRA_PATTERNS 0)
#                    string(REGEX REPLACE "([\\$])" "\\\1" GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT ${GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT})
                    string(REPLACE "\\" "\\\\" GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT ${GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT})
                    string(REPLACE "\${" "\\\${" GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT ${GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT})
                    string(REPLACE "\"" "\\\"" GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT ${GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT})
                    file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} " \"" ${GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT} "\"")
                  endif (GVR_EXPORT_BUILD_EXTRA_PATTERNS)
                endif ((GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT STREQUAL "PATTERN") OR (GVR_EXPORT_BUILD_EXTRA_PATTERN_ARGUMENT STREQUAL "REGEX"))
              endwhile (GVR_EXPORT_BUILD_EXTRA_PATTERNS)
            endif (GVR_EXPORT_BUILD_EXTRA_PATTERNS)

            file(APPEND ${GVR_EXPORT_BUILD_EXTRA_SCRIPT} ")")

            set(GVR_EXPORT_BUILD_EXTRA_DO_FIRST_COMMAND)
            if (GVR_EXPORT_BUILD_EXTRA_REMOVE_FIRST)
              set(GVR_EXPORT_BUILD_EXTRA_DO_FIRST_COMMAND COMMAND ${CMAKE_COMMAND} -E remove_directory ${GVR_EXPORT_BUILD_EXTRA_DESTINATION})
            else (GVR_EXPORT_BUILD_EXTRA_REMOVE_FIRST)
              if (GVR_EXPORT_BUILD_EXTRA_REMOVE_FIRST_RESOURCES_ONLY)
                foreach (GVR_EXPORT_BUILD_EXTRA_RESOURCE ${GVR_EXPORT_BUILD_EXTRA_RESOURCES})
                  get_filename_component(GVR_EXPORT_BUILD_EXTRA_RESOURCE_NAME ${GVR_EXPORT_BUILD_EXTRA_RESOURCE} NAME)
                  if (GVR_EXPORT_BUILD_EXTRA_RESOURCE_NAME)
                    set(GVR_EXPORT_BUILD_EXTRA_DO_FIRST_COMMAND ${GVR_EXPORT_BUILD_EXTRA_DO_FIRST_COMMAND} COMMAND ${CMAKE_COMMAND} -E remove_directory ${GVR_EXPORT_BUILD_EXTRA_DESTINATION}/${GVR_EXPORT_BUILD_EXTRA_RESOURCE_NAME})
                  endif (GVR_EXPORT_BUILD_EXTRA_RESOURCE_NAME)
                endforeach (GVR_EXPORT_BUILD_EXTRA_RESOURCE)
              endif (GVR_EXPORT_BUILD_EXTRA_REMOVE_FIRST_RESOURCES_ONLY)
            endif (GVR_EXPORT_BUILD_EXTRA_REMOVE_FIRST)

            if (NOT TARGET export-${GVR_EXPORT_BUILD_EXTRA_PROJECT}-extra)
              add_custom_target(export-${GVR_EXPORT_BUILD_EXTRA_PROJECT}-extra
                                ${GVR_EXPORT_BUILD_EXTRA_DO_FIRST_COMMAND}
                                COMMAND ${CMAKE_COMMAND} ${GVR_EXPORT_BUILD_INSTALL_OPTIONS_CMAKE_STYLE} "-P" "${GVR_EXPORT_BUILD_EXTRA_SCRIPT}"
                                WORKING_DIRECTORY ${GVR_EXPORT_BUILD_EXTRA_PROJECT_LOCATION}
                                COMMENT "Exporting project 'GVR_EXPORT_BUILD_EXTRA_PROJECT' extras..." VERBATIM)
            endif (NOT TARGET export-${GVR_EXPORT_BUILD_EXTRA_PROJECT}-extra)

            if (NOT TARGET export-${GVR_EXPORT_BUILD_EXTRA_PROJECT})
              add_custom_target(export-${GVR_EXPORT_BUILD_EXTRA_PROJECT})
            endif (NOT TARGET export-${GVR_EXPORT_BUILD_EXTRA_PROJECT})
            add_dependencies(export-${GVR_EXPORT_BUILD_EXTRA_PROJECT} export-${GVR_EXPORT_BUILD_EXTRA_PROJECT}-extra)

            if (NOT TARGET export)
              add_custom_target(export)
            endif (NOT TARGET export)
            add_dependencies(export export-${GVR_EXPORT_BUILD_EXTRA_PROJECT})

          endif (GVR_EXPORT_BUILD_EXTRA_RESOURCES)
        else (GVR_EXPORT_BUILD_EXTRA_DESTINATION)
          message(FATAL_ERROR "GVR_EXPORT_BUILD_EXTRA: No destination assigned for this buid export...")
        endif (GVR_EXPORT_BUILD_EXTRA_DESTINATION)
      else (IS_DIRECTORY ${GVR_EXPORT_BUILD_EXTRA_PROJECT_LOCATION})
        message(FATAL_ERROR "GVR_EXPORT_BUILD_EXTRA: Invalid project assigned for this buid export...")
      endif (IS_DIRECTORY ${GVR_EXPORT_BUILD_EXTRA_PROJECT_LOCATION})
    else (GVR_EXPORT_BUILD_EXTRA_PROJECT)
      message(FATAL_ERROR "GVR_EXPORT_BUILD_EXTRA: No project assigned for this buid export...")
    endif (GVR_EXPORT_BUILD_EXTRA_PROJECT)
  endfunction (GVR_EXPORT_BUILD_EXTRA)

  ############### GVR Support Definitions ###############
  function (GVR_EXPORT_BUILD_INFORMATION)
    include(CMakePackageConfigHelpers)
    include(CMakeParseArguments)
    set(GVR_FLAGS REMOVE_FIRST)
    set(GVR_SINGLE_VALUE PROJECT DESTINATION NAME COPYRIGHT VERSION COMPATIBILITY CODE)
# Removed namespace from options as it complicates implicit find_library on importing projects.
#    set(GVR_SINGLE_VALUE ${GVR_SINGLE_VALUE} NAMESPACE)
    set(GVR_MULTI_VALUE DEFINITIONS INCLUDES LINK_LOCATIONS COMMAND_LOCATIONS TARGETS)
    cmake_parse_arguments(GVR_EXPORT_BUILD_INFORMATION "${GVR_FLAGS}" "${GVR_SINGLE_VALUE}" "${GVR_MULTI_VALUE}" ${ARGN})
    if (GVR_EXPORT_BUILD_INFORMATION_PROJECT)
      set(GVR_EXPORT_BUILD_INFORMATION_PROJECT_LOCATION ${${GVR_EXPORT_BUILD_INFORMATION_PROJECT}_BINARY_DIR})
      if (IS_DIRECTORY ${GVR_EXPORT_BUILD_INFORMATION_PROJECT_LOCATION})
        if (GVR_EXPORT_BUILD_INFORMATION_DESTINATION)
          file(TO_CMAKE_PATH ${GVR_EXPORT_BUILD_INFORMATION_DESTINATION} GVR_EXPORT_BUILD_INFORMATION_DESTINATION)
          if (NOT IS_ABSOLUTE ${GVR_EXPORT_BUILD_INFORMATION_DESTINATION})
            set(GVR_EXPORT_BUILD_INFORMATION_DESTINATION ${CMAKE_BINARY_DIR}/${GVR_EXPORT_BUILD_INFORMATION_DESTINATION})
          endif (NOT IS_ABSOLUTE ${GVR_EXPORT_BUILD_INFORMATION_DESTINATION})
          get_filename_component(GVR_EXPORT_BUILD_INFORMATION_DESTINATION ${GVR_EXPORT_BUILD_INFORMATION_DESTINATION} REALPATH)

          set(GVR_EXPORT_BUILD_INFORMATION_SCRIPT ${${GVR_EXPORT_BUILD_INFORMATION_PROJECT}_BINARY_DIR}/gvr_export_build_information.cmake)
          set(GVR_EXPORT_BUILD_INFORMATION_SCRIPT_VERSION ${${GVR_EXPORT_BUILD_INFORMATION_PROJECT}_BINARY_DIR}/gvr_export_build_information_version.cmake)

          if (NOT GVR_EXPORT_BUILD_INFORMATION_NAME)
            set(GVR_EXPORT_BUILD_INFORMATION_NAME ${GVR_EXPORT_BUILD_INFORMATION_PROJECT})
          endif (NOT GVR_EXPORT_BUILD_INFORMATION_NAME)

          if (NOT GVR_EXPORT_BUILD_INFORMATION_REMOVE_FIRST AND (GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT OR GVR_EXPORT_BUILD_INFORMATION_VERSION OR GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY))
            if (EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT})
              if (GVR_EXPORT_COPYRIGHT)
                message(WARNING "GVR_EXPORT_BUILD_INFORMATION: Appending export build information and ingnoring variable COPYRIGHT '${GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT}'.")
              endif (GVR_EXPORT_COPYRIGHT)
            endif (EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT})
            if (EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT_VERSION})
              if (GVR_EXPORT_VERSION)
                message(WARNING "GVR_EXPORT_BUILD_INFORMATION: Appending export build information and ingnoring variable VERSION '${GVR_EXPORT_BUILD_INFORMATION_VERSION}'.")
              endif (GVR_EXPORT_VERSION)
              if (GVR_EXPORT_COMPATIBILITY)
                message(WARNING "GVR_EXPORT_BUILD_INFORMATION: Appending export build information and ingnoring variable COMPATIBILITY '${GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY}'.")
              endif (GVR_EXPORT_COMPATIBILITY)
            endif (EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT_VERSION})
          endif (NOT GVR_EXPORT_BUILD_INFORMATION_REMOVE_FIRST AND (GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT OR GVR_EXPORT_BUILD_INFORMATION_VERSION OR GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY))

#          if (NOT GVR_EXPORT_BUILD_INFORMATION_NAMESPACE)
#            set(GVR_EXPORT_BUILD_INFORMATION_NAMESPACE "")
#          endif (NOT GVR_EXPORT_BUILD_INFORMATION_NAMESPACE)

          if (GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT)
            set(GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT "## Copyright: ${GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT} ##")
          else (GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT)
            set(GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT "")
          endif (GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT)

          if (GVR_EXPORT_BUILD_INFORMATION_VERSION)
            set(GVR_EXPORT_BUILD_INFORMATION_VERSION_ARGUMENT VERSION ${GVR_EXPORT_BUILD_INFORMATION_VERSION})
          else (GVR_EXPORT_BUILD_INFORMATION_VERSION)
            set(GVR_EXPORT_BUILD_INFORMATION_VERSION "")
            set(GVR_EXPORT_BUILD_INFORMATION_VERSION_ARGUMENT "")
          endif (GVR_EXPORT_BUILD_INFORMATION_VERSION)

          if (GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY)
            set(GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY COMPATIBILITY ${GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY})
          else (GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY)
            set(GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY "")
          endif (GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY)

          if (NOT GVR_EXPORT_BUILD_INFORMATION_CODE)
            set(GVR_EXPORT_BUILD_INFORMATION_CODE "")
          endif (NOT GVR_EXPORT_BUILD_INFORMATION_CODE)

          if (GVR_EXPORT_BUILD_INFORMATION_DEFINITIONS)
            list(REMOVE_DUPLICATES GVR_EXPORT_BUILD_INFORMATION_DEFINITIONS)
          endif (GVR_EXPORT_BUILD_INFORMATION_DEFINITIONS)

          if (GVR_EXPORT_BUILD_INFORMATION_INCLUDES)
            list(REMOVE_DUPLICATES GVR_EXPORT_BUILD_INFORMATION_INCLUDES)
          endif (GVR_EXPORT_BUILD_INFORMATION_INCLUDES)

          if (GVR_EXPORT_BUILD_INFORMATION_LINK_LOCATIONS)
            list(REMOVE_DUPLICATES GVR_EXPORT_BUILD_INFORMATION_LINK_LOCATIONS)
          endif (GVR_EXPORT_BUILD_INFORMATION_LINK_LOCATIONS)

          if (GVR_EXPORT_BUILD_INFORMATION_COMMAND_LOCATIONS)
            list(REMOVE_DUPLICATES GVR_EXPORT_BUILD_INFORMATION_COMMAND_LOCATIONS)
          endif (GVR_EXPORT_BUILD_INFORMATION_COMMAND_LOCATIONS)

          if (GVR_EXPORT_BUILD_INFORMATION_TARGETS)
            list(REMOVE_DUPLICATES GVR_EXPORT_BUILD_INFORMATION_TARGETS)
          endif (GVR_EXPORT_BUILD_INFORMATION_TARGETS)

          set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_INCLUDES "")
          foreach (GVR_EXPORT_BUILD_INFORMATION_INCLUDE ${GVR_EXPORT_BUILD_INFORMATION_INCLUDES})
            file(TO_CMAKE_PATH ${GVR_EXPORT_BUILD_INFORMATION_INCLUDE} GVR_EXPORT_BUILD_INFORMATION_INCLUDE)
            set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_INCLUDES ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_INCLUDES} ${GVR_EXPORT_BUILD_INFORMATION_INCLUDE})
          endforeach (GVR_EXPORT_BUILD_INFORMATION_INCLUDE)

          set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_LINK_LOCATIONS "")
          foreach (GVR_EXPORT_BUILD_INFORMATION_LINK_LOCATION ${GVR_EXPORT_BUILD_INFORMATION_LINK_LOCATIONS})
            file(TO_CMAKE_PATH ${GVR_EXPORT_BUILD_INFORMATION_LINK_LOCATION} GVR_EXPORT_BUILD_INFORMATION_LINK_LOCATION)
            set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_LINK_LOCATIONS ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_LINK_LOCATIONS} ${GVR_EXPORT_BUILD_INFORMATION_LINK_LOCATION})
          endforeach (GVR_EXPORT_BUILD_INFORMATION_LINK_LOCATION)

          set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_COMMAND_LOCATIONS "")
          foreach (GVR_EXPORT_BUILD_INFORMATION_COMMAND_LOCATION ${GVR_EXPORT_BUILD_INFORMATION_COMMAND_LOCATIONS})
            file(TO_CMAKE_PATH ${GVR_EXPORT_BUILD_INFORMATION_COMMAND_LOCATION} GVR_EXPORT_BUILD_INFORMATION_COMMAND_LOCATION)
            set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_COMMAND_LOCATIONS ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_COMMAND_LOCATIONS} ${GVR_EXPORT_BUILD_INFORMATION_COMMAND_LOCATION})
          endforeach (GVR_EXPORT_BUILD_INFORMATION_COMMAND_LOCATION)

          if (GVR_EXPORT_BUILD_INFORMATION_REMOVE_FIRST)
              file(REMOVE ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT_VERSION})
          endif (GVR_EXPORT_BUILD_INFORMATION_REMOVE_FIRST)

          if (NOT EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT})
            file(WRITE ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "${GVR_EXPORT_BUILD_INFORMATION_COPYRIGHT}
cmake_minimum_required(VERSION ${CMAKE_VERSION} FATAL_ERROR)
if (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED)
  return()
endif (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED)
if (NOT ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION)
  if (GVR_AUTO_IMPORTED_EXTERNAL_PREFIX_LOCATION)
    if (GVR_AUTO_IMPORTED_EXTERNAL_PREFIX_LOCATION_REGEX_PAIR)
      string(REGEX REPLACE \${GVR_AUTO_IMPORTED_EXTERNAL_PREFIX_LOCATION_REGEX_PAIR} ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION \${${GVR_EXPORT_BUILD_INFORMATION_NAME}_DIR})
    else (GVR_AUTO_IMPORTED_EXTERNAL_PREFIX_LOCATION_REGEX_PAIR)
      set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION \${${GVR_EXPORT_BUILD_INFORMATION_NAME}_DIR})
    endif (GVR_AUTO_IMPORTED_EXTERNAL_PREFIX_LOCATION_REGEX_PAIR)
  endif (GVR_AUTO_IMPORTED_EXTERNAL_PREFIX_LOCATION)
  if (NOT ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION)
    message(FATAL_ERROR \"Importing '${GVR_EXPORT_BUILD_INFORMATION_NAME}' but no '${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION' variable set.\")
  endif (NOT ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION)
endif (NOT ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION)

if (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION)
  file(TO_CMAKE_PATH \${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION} ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION)
endif (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION)

set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED ON)
set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_VERSION ${GVR_EXPORT_BUILD_INFORMATION_VERSION})
set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL ON)
")
          endif (NOT EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT})

          if (EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT})
            if (GVR_EXPORT_BUILD_INFORMATION_DEFINITIONS)
              file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "
set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_DEFINITIONS \${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_DEFINITIONS}")
              foreach(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_DEFINITIONS})
                string(REPLACE "<PROJECT_IMPORTED_EXTERNAL_PREFIX_LOCATION>" "\${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION}" ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM})
                file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} " " ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM})
              endforeach(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM)
              file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} ")
")
            endif (GVR_EXPORT_BUILD_INFORMATION_DEFINITIONS)

            if (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_INCLUDES)
              file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "
set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_INCLUDES \${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_INCLUDES}")
              foreach(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_INCLUDES})
                string(REPLACE "<PROJECT_IMPORTED_EXTERNAL_PREFIX_LOCATION>" "\${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION}" ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM})
                file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} " " ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM})
              endforeach(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM)
              file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} ")
")
            endif (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_INCLUDES)

            if (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_LINK_LOCATIONS)
              file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "
set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_LINK_LOCATIONS \${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_LINK_LOCATIONS}")
              foreach(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_LINK_LOCATIONS})
                string(REPLACE "<PROJECT_IMPORTED_EXTERNAL_PREFIX_LOCATION>" "\${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION}" ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM})
                file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} " " ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM})
              endforeach(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM)
              file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} ")
")
            endif (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_LINK_LOCATIONS)

            if (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_COMMAND_LOCATIONS)
              file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "
set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_COMMAND_LOCATIONS \${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_COMMAND_LOCATIONS}")
              foreach(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_COMMAND_LOCATIONS})
                string(REPLACE "<PROJECT_IMPORTED_EXTERNAL_PREFIX_LOCATION>" "\${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION}" ${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM})
                file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} " " ${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM})
              endforeach(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_ITEM)
              file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} ")
")
            endif (${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_COMMAND_LOCATIONS)


            if (GVR_EXPORT_BUILD_INFORMATION_TARGETS)
              foreach (GVR_EXPORT_BUILD_INFORMATION_TARGET ${GVR_EXPORT_BUILD_INFORMATION_TARGETS})
                if (TARGET ${GVR_EXPORT_BUILD_INFORMATION_TARGET})
                  get_target_property(GVR_EXPORT_BUILD_INFORMATION_TARGET_TYPE ${GVR_EXPORT_BUILD_INFORMATION_TARGET} TYPE)
                  set(GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME ${GVR_EXPORT_BUILD_INFORMATION_TARGET})
#                  if (GVR_EXPORT_BUILD_INFORMATION_NAMESPACE)
#                    set(GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME ${GVR_EXPORT_BUILD_INFORMATION_NAMESPACE}${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME})
#                  endif (GVR_EXPORT_BUILD_INFORMATION_NAMESPACE)

                  file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "

set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_TARGETS \${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_TARGETS} ${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME})
set(${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_${GVR_EXPORT_BUILD_INFORMATION_TARGET_TYPE}_TARGETS \${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_${GVR_EXPORT_BUILD_INFORMATION_TARGET_TYPE}_TARGETS} ${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME})
")
##-###############################################################################################################-##
# Excluded due to an issue which involves having to place all information on target if explicitly declared as IMPORTED target
# If not declared as target link_directories() function in imported projects will find the targets.
#
#                  file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "
#if (NOT TARGET ${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME})
#")
#                  set(GVR_EXPORT_BUILD_INFORMATION_TARGET_CONFIGURATIONS "")
#                  get_target_property(GVR_EXPORT_BUILD_INFORMATION_TARGET_IMPORTED ${GVR_EXPORT_BUILD_INFORMATION_TARGET} IMPORTED)
#                  if (GVR_EXPORT_BUILD_INFORMATION_TARGET_IMPORTED)
#                    get_target_property(GVR_EXPORT_BUILD_INFORMATION_TARGET_CONFIGURATIONS ${GVR_EXPORT_BUILD_INFORMATION_TARGET} IMPORTED_CONFIGURATIONS)
#                  else (GVR_EXPORT_BUILD_INFORMATION_TARGET_IMPORTED)
#                    set(GVR_EXPORT_BUILD_INFORMATION_TARGET_CONFIGURATIONS ${CMAKE_BUILD_TYPE})
#                  endif (GVR_EXPORT_BUILD_INFORMATION_TARGET_IMPORTED)
#
#                  if (NOT GVR_EXPORT_BUILD_INFORMATION_TARGET_CONFIGURATIONS)
#                    set(GVR_EXPORT_BUILD_INFORMATION_TARGET_CONFIGURATIONS NOCONFIG)
#                  endif (NOT GVR_EXPORT_BUILD_INFORMATION_TARGET_CONFIGURATIONS)
#
#                  if (GVR_EXPORT_BUILD_INFORMATION_TARGET_TYPE MATCHES "^(.*)_LIBRARY$")
#                    file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "
#  # Create imported target ${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME}
#  ADD_LIBRARY(${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME} ${CMAKE_MATCH_1} IMPORTED)
#  SET_PROPERTY(TARGET ${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME} APPEND PROPERTY IMPORTED_CONFIGURATIONS ${GVR_EXPORT_BUILD_INFORMATION_TARGET_CONFIGURATIONS})
#")
#                  else (GVR_EXPORT_BUILD_INFORMATION_TARGET_TYPE MATCHES "^(.*)_LIBRARY$")
#                    if (GVR_EXPORT_BUILD_INFORMATION_TARGET_TYPE STREQUAL "EXECUTABLE")
#                      file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "
#  # Create imported target ${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME}
#  ADD_EXECUTABLE(${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME} IMPORTED)
#  SET_PROPERTY(TARGET ${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME} APPEND PROPERTY IMPORTED_CONFIGURATIONS ${GVR_EXPORT_BUILD_INFORMATION_TARGET_CONFIGURATIONS})
#")
#                    endif (GVR_EXPORT_BUILD_INFORMATION_TARGET_TYPE STREQUAL "EXECUTABLE")
#                  endif (GVR_EXPORT_BUILD_INFORMATION_TARGET_TYPE MATCHES "^(.*)_LIBRARY$")
#
#                  file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "
#endif (NOT TARGET ${GVR_EXPORT_BUILD_INFORMATION_TARGET_NAME})
#")
##-###############################################################################################################-##

                else (TARGET ${GVR_EXPORT_BUILD_INFORMATION_TARGET})
                  message(WARNING "GVR_EXPORT_BUILD_INFORMATION: unable to export invalid TARGET '${GVR_EXPORT_BUILD_INFORMATION_TARGET}'.")
                endif (TARGET ${GVR_EXPORT_BUILD_INFORMATION_TARGET})
              endforeach (GVR_EXPORT_BUILD_INFORMATION_TARGET)
            endif (GVR_EXPORT_BUILD_INFORMATION_TARGETS)

            if (GVR_EXPORT_BUILD_INFORMATION_CODE)
              string(REPLACE "<PROJECT_IMPORTED_EXTERNAL_PREFIX_LOCATION>" "\${${GVR_EXPORT_BUILD_INFORMATION_NAME}_IMPORTED_EXTERNAL_PREFIX_LOCATION}" GVR_EXPORT_BUILD_INFORMATION_CODE ${GVR_EXPORT_BUILD_INFORMATION_CODE})
              file(APPEND ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} "
"
${GVR_EXPORT_BUILD_INFORMATION_CODE}
"
")
            endif (GVR_EXPORT_BUILD_INFORMATION_CODE)
          endif (EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT})

          if (NOT EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT_VERSION})
            write_basic_package_version_file(${GVR_EXPORT_BUILD_INFORMATION_SCRIPT_VERSION} ${GVR_EXPORT_BUILD_INFORMATION_VERSION_ARGUMENT} ${GVR_EXPORT_BUILD_INFORMATION_COMPATIBILITY})
          endif (NOT EXISTS ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT_VERSION})

          if (NOT TARGET export-${GVR_EXPORT_BUILD_INFORMATION_PROJECT}-information)
            add_custom_target(export-${GVR_EXPORT_BUILD_INFORMATION_PROJECT}-information
                              COMMAND ${CMAKE_COMMAND} -E remove -f ${GVR_EXPORT_BUILD_INFORMATION_DESTINATION}/${GVR_EXPORT_BUILD_INFORMATION_NAME}Config.cmake
                              COMMAND ${CMAKE_COMMAND} -E remove -f ${GVR_EXPORT_BUILD_INFORMATION_DESTINATION}/${GVR_EXPORT_BUILD_INFORMATION_NAME}ConfigVersion.cmake
                              COMMAND ${CMAKE_COMMAND} -E copy ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT} ${GVR_EXPORT_BUILD_INFORMATION_DESTINATION}/${GVR_EXPORT_BUILD_INFORMATION_NAME}Config.cmake
                              COMMAND ${CMAKE_COMMAND} -E copy ${GVR_EXPORT_BUILD_INFORMATION_SCRIPT_VERSION} ${GVR_EXPORT_BUILD_INFORMATION_DESTINATION}/${GVR_EXPORT_BUILD_INFORMATION_NAME}ConfigVersion.cmake
                              WORKING_DIRECTORY "${GVR_EXPORT_BUILD_INFORMATION_PROJECT_LOCATION}"
                              COMMENT "Exporting project 'GVR_EXPORT_BUILD_INFORMATION_PROJECT' information..." VERBATIM)
          endif (NOT TARGET export-${GVR_EXPORT_BUILD_INFORMATION_PROJECT}-information)

          if (NOT TARGET export-${GVR_EXPORT_BUILD_INFORMATION_PROJECT})
            add_custom_target(export-${GVR_EXPORT_BUILD_INFORMATION_PROJECT})
          endif (NOT TARGET export-${GVR_EXPORT_BUILD_INFORMATION_PROJECT})
          add_dependencies(export-${GVR_EXPORT_BUILD_INFORMATION_PROJECT} export-${GVR_EXPORT_BUILD_INFORMATION_PROJECT}-information)

          if (NOT TARGET export)
            add_custom_target(export)
          endif (NOT TARGET export)
          add_dependencies(export export-${GVR_EXPORT_BUILD_INFORMATION_PROJECT})

        else (GVR_EXPORT_BUILD_INFORMATION_DESTINATION)
          message(FATAL_ERROR "GVR_EXPORT_BUILD_INFORMATION: No destination assigned for this buid export...")
        endif (GVR_EXPORT_BUILD_INFORMATION_DESTINATION)
      else (IS_DIRECTORY ${GVR_EXPORT_BUILD_INFORMATION_PROJECT_LOCATION})
        message(FATAL_ERROR "GVR_EXPORT_BUILD_INFORMATION: Invalid project assigned for this buid export...")
      endif (IS_DIRECTORY ${GVR_EXPORT_BUILD_INFORMATION_PROJECT_LOCATION})
    else (GVR_EXPORT_BUILD_INFORMATION_PROJECT)
      message(FATAL_ERROR "GVR_EXPORT_BUILD_INFORMATION: No project assigned for this buid export...")
    endif (GVR_EXPORT_BUILD_INFORMATION_PROJECT)
  endfunction (GVR_EXPORT_BUILD_INFORMATION)

  ############### GVR Support Definitions ###############
  function (GVR_EXPORT_BUILD_BUNDLE)
    include(CMakeParseArguments)
    set(GVR_FLAGS "")
    set(GVR_SINGLE_VALUE PROJECT)
    set(GVR_MULTI_VALUE BUNDLES)
    cmake_parse_arguments(GVR_EXPORT_BUILD_BUNDLE "${GVR_FLAGS}" "${GVR_SINGLE_VALUE}" "${GVR_MULTI_VALUE}" ${ARGN})

    if (NOT GVR_EXPORT_BUILD_BUNDLE_BUNDLES)
      message(FATAL_ERROR "GVR_EXPORT_BUILD_BUNDLE: No export bundles provided.")
    endif (NOT GVR_EXPORT_BUILD_BUNDLE_BUNDLES)
    if (NOT GVR_EXPORT_BUILD_BUNDLE_PROJECT)
      message(FATAL_ERROR "GVR_EXPORT_BUILD_BUNDLE: No export project provided.")
    endif (NOT GVR_EXPORT_BUILD_BUNDLE_PROJECT)
    if (NOT TARGET export-${GVR_EXPORT_BUILD_BUNDLE_PROJECT})
      message(FATAL_ERROR "GVR_EXPORT_BUILD_BUNDLE: Provided export project is not a target.")
    endif (NOT TARGET export-${GVR_EXPORT_BUILD_BUNDLE_PROJECT})

    if (NOT TARGET export)
      add_custom_target(export)
    endif (NOT TARGET export)

    foreach (GVR_EXPORT_BUILD_BUNDLE_BUNDLE ${GVR_EXPORT_BUILD_BUNDLE_BUNDLES})
      if (NOT TARGET export-${GVR_EXPORT_BUILD_BUNDLE_BUNDLE})
        add_custom_target(export-${GVR_EXPORT_BUILD_BUNDLE_BUNDLE})
      endif (NOT TARGET export-${GVR_EXPORT_BUILD_BUNDLE_BUNDLE})
      add_dependencies(export export-${GVR_EXPORT_BUILD_BUNDLE_BUNDLE})
      add_dependencies(export-${GVR_EXPORT_BUILD_BUNDLE_BUNDLE} export-${GVR_EXPORT_BUILD_BUNDLE_PROJECT})
    endforeach (GVR_EXPORT_BUILD_BUNDLE_BUNDLE)
  endfunction (GVR_EXPORT_BUILD_BUNDLE)

endif (NOT DEFINED GVR_EXPORT_BUILD_INCLUDED)

##----------------------------------------------------------------------------------------------------------------------------------------------------------------------
# set(EXPORT_BUILD_STRIP "")
# set(EXPORT_BUILD_OPTIONS "")
# if (CMAKE_BUILD_TYPE STREQUAL RELEASE)
#   set(EXPORT_BUILD_STRIP STRIP)
#   set(EXPORT_BUILD_OPTIONS OPTIONS "COMPONENT=Runtime")
# endif (CMAKE_BUILD_TYPE STREQUAL RELEASE)
# 
# gvr_export_build_install(PROJECT ${PROJECT_NAME}
#                          DESTINATION "${GVR_REMOTE_EXPORT_LOCATION}/${PROJECT_NAME}/${CMAKE_BUILD_TYPE}"
#                          ${EXPORT_BUILD_OPTIONS}
#                          REMOVE_FIRST
#                          ${EXPORT_BUILD_STRIP})
# 
# if (CMAKE_BUILD_TYPE STREQUAL RELEASE)
#   gvr_export_build_extra(PROJECT ${PROJECT_NAME}
#                          DESTINATION "${GVR_REMOTE_EXPORT_LOCATION}/${PROJECT_NAME}"
#                          RESOURCES "misc/spot_build/resource/Makefile"
#                          DIRECTORY_PERMISSIONS
#                            OWNER_READ OWNER_WRITE OWNER_EXECUTE
#                            GROUP_READ GROUP_WRITE GROUP_EXECUTE
#                            WORLD_READ WORLD_WRITE WORLD_EXECUTE
#                          FILE_PERMISSIONS 
#                            OWNER_READ OWNER_WRITE
#                            GROUP_READ GROUP_WRITE
#                            WORLD_READ WORLD_WRITE
#                            SETUID SETGID
#                          NO_SOURCE_PERMISSIONS
#                          PATTERNS
#                           PATTERN "*.readonly" PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
#                           REGEX ".*/\\.svn/.*" EXCLUDE
#                          REMOVE_FIRST)
# endif (CMAKE_BUILD_TYPE STREQUAL RELEASE)
# 
# if (CMAKE_BUILD_TYPE STREQUAL DEBUG)
#   gvr_export_build_information(PROJECT ${PROJECT_NAME}
#                                NAME "${PROJECT_NAME}"
#                                DESTINATION "${GVR_REMOTE_EXPORT_LOCATION}/${PROJECT_NAME}/import"
#                                COPYRIGHT "Copyright © 2014 Gilbarco Inc. Confidential and Proprietary."
#                                VERSION "${${PROJECT_NAME}_VERSION}"
#                                COMPATIBILITY AnyNewerVersion
#                                CODE ""
#                                DEFINITIONS ""
#                                INCLUDES "${CMAKE_BUILD_TYPE}/${${PROJECT_NAME}_INSTALL_RELATIVE_LOCATION}/include"
#                                LINK_LOCATIONS "${CMAKE_BUILD_TYPE}/${${PROJECT_NAME}_INSTALL_RELATIVE_LOCATION}/lib" "${CMAKE_BUILD_TYPE}/${${PROJECT_NAME}_INSTALL_RELATIVE_LOCATION}/lib/${PROJECT_NAME}-${${PROJECT_NAME}_VERSION}"
#                                COMMAND_LOCATIONS "${CMAKE_BUILD_TYPE}/${${PROJECT_NAME}_INSTALL_RELATIVE_LOCATION}/bin"
#                                TARGETS ${${PROJECT_NAME}_INSTALLABLE_TARGETS}
#                                REMOVE_FIRST)
# endif (CMAKE_BUILD_TYPE STREQUAL DEBUG)

##----------------------------------------------------------------------------------------------------------------------------------------------------------------------
# "-Dlibgvrdummy_IMPORTED_EXTERNAL_PREFIX_LOCATION=${ROOTDIR}/user/binaries/libgrvdummy/"
# ${ROOTDIR}/user/binaries/
#                           <PROJECT_PREFIX_LOCATION>/
#                                                     import/
#                                                             <PROJECT_NAME>Config.cmake
#                                                             <PROJECT_NAME>Version.cmake
#                                                     debug/
#                                                             opt/
#                                                                 gilbarco/
#                                                                           lib/
#                                                                           bin/
#                                                                           include/
#                                                     release/
#                                                             opt/
#                                                                 gilbarco/
#                                                                           lib/
#                                                                           bin/
#                                                     Makefile
##----------------------------------------------------------------------------------------------------------------------------------------------------------------------
# SBR_Smart_CRIND_Sprint_0X/
#                           build/
#                           gvr/
#                           opensource/
#                           Makefile
#                           Makefile.inc
#                           CMakeLists.txt
#                           .build/
#                           .import/
#                                    native/
#                                            <PROJECT_PREFIX_LOCATION>/
#                                                                       import/
#                                                                               <PROJECT_NAME>Config.cmake
#                                                                               <PROJECT_NAME>Version.cmake
#                                                                       debug/
#                                                                               opt/
#                                                                                    gilbarco/
#                                                                                              lib/
#                                                                                              bin/
#                                                                                              include/
#                                                                       release/
#                                                                                opt/
#                                                                                     gilbarco/
#                                                                                               lib/
#                                                                                               bin/
#                                                                       Makefile
##----------------------------------------------------------------------------------------------------------------------------------------------------------------------

##----------------------------------------------------------------------------------------------------------------------------------------------------------------------
# CMAKE_BUILD_TYPE
# CMAKE_BUILD_TYPE_INIT

# CMAKE_EXE_LINKER_FLAGS
# CMAKE_SHARED_LINKER_FLAGS
# CMAKE_MODULE_LINKER_FLAGS
# CMAKE_<LANG>_FLAGS_INIT
# CMAKE_<LANG>_FLAGS

# if (CMAKE_BUILD_TYPE)
#   CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE}
#   CMAKE_SHARED_LINKER_FLAGS_${CMAKE_BUILD_TYPE}
#   CMAKE_MODULE_LINKER_FLAGS_${CMAKE_BUILD_TYPE}
#   CMAKE_<LANG>_FLAGS_${CMAKE_BUILD_TYPE}_INIT
#   CMAKE_<LANG>_FLAGS_${CMAKE_BUILD_TYPE}
# endif (CMAKE_BUILD_TYPE)
##----------------------------------------------------------------------------------------------------------------------------------------------------------------------
# CMAKE_EXECUTABLE_SUFFIX
# CMAKE_STATIC_LIBRARY_PREFIX
# CMAKE_STATIC_LIBRARY_SUFFIX
# CMAKE_SHARED_LIBRARY_PREFIX
# CMAKE_SHARED_LIBRARY_SUFFIX
# CMAKE_SHARED_MODULE_PREFIX
# CMAKE_SHARED_MODULE_SUFFIX
##----------------------------------------------------------------------------------------------------------------------------------------------------------------------
